import { sequelize } from '@models/database/squalized'
import { errHandler } from '@helpers/errHandlers'
import { Account } from '@models/user/account'
const { DataTypes, Model } = require('sequelize');
const sha256 = require('sha256')
export const encription_key = "encode_key_7430455d242948729bba1279d80bc905039b27bc8ca5a11a32c00ce46387ba28"


export class PasswordModel extends Model { }

PasswordModel.init({

	user_id: {
		type: DataTypes.UUID,		
	},
    password: {
		type: DataTypes.STRING,
		allowNull: false,
		validate: {		
			 notNull: {
				msg: 'Please enter a password'
			},			
		},
		set(value) {		
			this.setDataValue('password', sha256(value + encription_key));
		}		
	},
    newPassword: {
        type: DataTypes.VIRTUAL,
		allowNull: false,
		validate: {		
			 notNull: {
				Accountsg: 'Please enter a password'
			},
			minlength(value){
				if(value.length < 4){
					throw new Error("Passowrd is too short");
				  } else if(value.length > 20){
					throw new Error("Passowrd is too long");
				  }
			 },
		},	
	},
	passwordConfirm: { 
		type: DataTypes.VIRTUAL,
		allowNull: false,
		validate: {	
            notNull: {
				msg: 'Please enter a password'
			},
		     matches(){
				if(this.newPassword != this.passwordConfirm){					
					throw new Error("Password not match");
				}
			 }
		},			
	},
	updatedAt:{
		type: DataTypes.DATE,		
		allowNull: true,		
	},
}, {
	// Other model options go here
	sequelize,
	validate:false,
	isNewRecord: false,
	modelName: 'users' // We need to choose the model name
});

