import { sequelize } from '@models/database/squalized'
const { DataTypes, Model } = require('sequelize');
const sha256 = require('sha256')
export const encription_key = "encode_key_7430455d242948729bba1279d80bc905039b27bc8ca5a11a32c00ce46387ba28"
import { errHandler } from '@helpers/errHandlers'
const { Op } = require("sequelize");

export class Account extends Model { }

Account.init({
	// Model attributes are defined here
	user_id: {
		type: DataTypes.UUID,		
	},
	username: {
		type: DataTypes.STRING,
		allowNull: false,		
		validate: {	
			notNull: {
				msg: 'Please enter a username'
			},
			async isUnique(value){
                const userIn = await Account.findAll({
                    where: {
                        username: value,
						user_id: {
							[Op.not]: this.user_id
						  }
                    },
                    limit: 1,
                    raw: true
                }).catch(errHandler);
               
                if (userIn.length) {
                    throw new Error("Name already exist. Please choose another one.");      					           
                } 			
			},
			minlength(value){
				if(value.length < 4){
					throw new Error("Name is too short, you need a minimum of 4 characters");
				  } else if(value.length > 20){
					throw new Error("Name is too long, max lenght is 20 characters");
				  }
			 },
		}
	},
	password: {
		type: DataTypes.STRING,
		allowNull: false,
		validate: {		
			 notNull: {
				msg: 'Please enter a password'
			},
			async passwordValidation(value){
				const userData = await Account.findOne({ where: { user_id: this.user_id } }).catch(errHandler);

				if (userData.password != this.password) {
					console.log(userData.password +' incorrect --> '+ this.password)
                    throw new Error("Incorrect password.");      					           
                } 
			},
		},	
		set(value) {		
			this.setDataValue('password', sha256(value + encription_key));
		}		
	},
	email: {
		type: DataTypes.STRING,
		unique: true,
		allowNull: false,
		validate: {	
			isEmail: {			
				msg: 'Invalid email'
			},
			notNull: {
				msg: 'Please enter a email'
			}			
		}
	},
	updatedAt:{
		type: DataTypes.DATE,		
		allowNull: true,		
	},
}, {
	// Other model options go here
	sequelize,
	isNewRecord: false,
	modelName: 'users' // We need to choose the model name
});

