
import { Settings } from '@factory/Settings'

export class Render extends Settings {

    getDna() {
        try {
            let dna = ''
            dna += $('#dnabody').html()
            dna += $('#dnamouth').html()
            dna += $('#dnaeyes').html()
            dna += $('#dnaears').html()
            dna += $('#dnashape').html()
            dna += $('#dnadecoration').html()
            dna += $('#dnadecorationMid').html()
            dna += $('#dnadecorationSides').html()
            dna += $('#dnaanimation').html()
            dna += $('#dnaspecial').html()
    
            if (dna.length !== 16) throw `DNA string ('${dna}') length should be 16 (not ${dna.length} digits)`
    
            return BigInt(dna)
        }
        catch (error) {
            console.log(`Error In getDna(): ${error}`)
        }
    }
    
    
     render(cat, idCat = "") {
        try {
            this.headColor(cat.dna.headColor, idCat)
            this.mouthChestTailColor(cat.dna.mouthColor, idCat)
            this.eyesColor(cat.dna.eyesColor, idCat)
            this.earsPawsColor(cat.dna.earsColor, idCat)
    
            this.decorationVariation(cat.dna.decorationPattern, idCat)
            this.innerDecorationColor(cat.dna.decorationMidColor, idCat)
            this.outerDecorationColor(cat.dna.decorationSidesColor, idCat)
            this.animationVariation(cat.dna.animation, idCat)
    
            // Display Special DNA digit  
            $(`${idCat} #dnaspecial`).html(cat.dna.lastNum) // Update DNA display (below cat)
    
            // Display Cats' Generation
            $(`${idCat}`).find('#catGenNum').html(cat.gen)
    
            // Display Cats' Price (if it has one)
            if (cat.price) $(`${idCat}`).find('#catPrice').html("PRICE: " + cat.price + " ETH")
    
            // Display Cats' status
            //    $(`${idCat}`).find('#catStatus').html("TEST")
    
        }
        catch (error) {
            console.log(`Error In render(cat, idCat=""): ${error}`)
        }
    }

    dnaFromGenes(genes){
      
        try {
         if (genes.length != 16) throw `genes string ('${genes}') should be 16 characters (not ${genes.length})`
    
            const dna = {
                "headColor" : genes.substring(0, 2),
                "mouthColor" : genes.substring(2, 4),
                "eyesColor" : genes.substring(4, 6),
                "earsColor" : genes.substring(6, 8),
                "eyesShape" : parseInt( genes.substring(8, 9) ),
                "decorationPattern" : parseInt( genes.substring(9, 10) ),
                "decorationMidColor" : genes.substring(10, 12),
                "decorationSidesColor" : genes.substring(12, 14),
                "animation" : parseInt( genes.substring(14, 15) ),
                "lastNum" : parseInt( genes.substring(15, 16) )
            }
            return(dna)
        }
        catch(error) {
            console.log("Error from getKittyDna(genes): " + error)
        }
    }
    
    
    
     updateSliders(dna) {
        try {
            $('#bodycolor').val(dna.headColor)             //Update slider's value
            $('#headcode').html('code: ' + dna.headColor)    //Update slider's badge
    
            $('#mouthcolor').val(dna.mouthColor)
            $('#mouthcode').html('code: ' + dna.mouthColor)
    
            $('#eyecolor').val(dna.eyesColor)
            $('#eyescode').html('code: ' + dna.eyesColor)
    
            $('#earcolor').val(dna.earsColor)
            $('#earscode').html('code: ' + dna.earsColor)
    
            $('#eyeshape').val(dna.eyesShape)
            $('#eyeName').html(this.eyeVariations[dna.eyesShape].name)
    
            $('#decorativepattern').val(dna.decorationPattern)
            $('#decorationName').html(this.decorationVariations[dna.decorationPattern].name)
    
            $('#innerDecorationColor').val(dna.decorationMidColor)
            $('#innerDecorationCode').html('code: ' + dna.decorationMidColor)
    
            $('#outerDecorationColor').val(dna.decorationSidesColor)
            $('#outerDecorationCode').html('code: ' + dna.decorationSidesColor)
    
            $('#animation').val(dna.animation)
            $('#animationName').html(this.animationVariations[dna.animation].name)
        }
        catch (error) {
            console.log(`Error In updateSliders(dna): ${error}`)
        }
    }
    
     rangeInputListerners() {
    
    
        // Slider changing cat attributes (colors, eyes, patterns)
        $('#bodycolor').change(() => {
            const colorVal = $('#bodycolor').val()
            $('#headcode').html('code: ' + colorVal)    // Update slider's badge
            this.headColor(colorVal)      // Update cat
        })
    
        $('#mouthcolor').change(() => {
            const colorVal = $('#mouthcolor').val()
            $('#mouthcode').html('code: ' + colorVal)
            this.mouthChestTailColor(colorVal)
        })
    
        $('#eyecolor').change(() => {
            const colorVal = $('#eyecolor').val()
            $('#eyescode').html('code: ' + colorVal)
            this.eyesColor(colorVal)
        })
    
        $('#earcolor').change(() => {
            const colorVal = $('#earcolor').val()
            $('#earscode').html('code: ' + colorVal)
            this.earsPawsColor(colorVal)
        })
    
        $('#eyeshape').change(() => {
            const shape = parseInt($('#eyeshape').val())
            $('#eyeName').html(eyeVariations[shape].name)
            this.eyeVariation(shape)
        })
    
        $('#decorativepattern').change(() => {
            const pattern = parseInt($('#decorativepattern').val())
            $('#decorationName').html(decorationVariations[pattern].name)
            this.decorationVariation(pattern)
        })
    
        $('#innerDecorationColor').change(() => {
            const colorVal = $('#innerDecorationColor').val()
            $('#innerDecorationCode').html('code: ' + colorVal)
            this.innerDecorationColor(colorVal)
        })
    
        $('#outerDecorationColor').change(() => {
            const colorVal = $('#outerDecorationColor').val()
            $('#outerDecorationCode').html('code: ' + colorVal)
            this.outerDecorationColor(colorVal)
        })
    
        $('#animation').change(() => {
            const animationValue = parseInt($('#animation').val())
            $('#animationName').html(animationVariations[animationValue].name)
            this.animationVariation(animationValue)
        })
    }
}
