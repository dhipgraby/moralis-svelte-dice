
import { shortAddr, getWei, getEth } from "@helpers/main";
import { alertParser } from "@helpers/messageParser";
import { Moralis } from "@moralis/MoralisSvelte";
import { alertTrigger } from "@storage/global";
import { CoinFlipAbi } from "@contracts/coinFlipAbi";

let web3, account, contractInstance;
const contractAddress = "0x1aE6f759A02f87fe26A107ae3d80AE3Fbe3874E8";

export const fundContract = async () => {
    web3 = await Moralis.Web3.enable();
    account = web3.currentProvider.selectedAddress;
    contractInstance = new web3.eth.Contract(CoinFlipAbi, contractAddress, {
        from: account,
    });
    try {
        await contractInstance.methods
            .funding()
            .send({ value: 1000000000000000000 });
        
    } catch (err) {
       console.log(err);
       alertTrigger.update(value => 
        value = alertParser(err.message,'warning')
       )

    }
};

export async function getContractBalance() {
    try {
        web3 = await Moralis.Web3.enable();
        let balance = await web3.eth.getBalance(contractAddress);
        balance = await getEth(web3, balance);
        return balance;
    } catch (err) {
        console.log(err);
        alertTrigger.update(value => 
            value = alertParser(err.message,'warning')
           )
    }
}
