
import { getEth,getWei } from "@helpers/main";
import { alertParser } from "@helpers/messageParser";
import { alertTrigger,setAlert } from "@storage/global";
import { contractInfo,updateBalances,contractAddress } from "@storage/contract";


let web3, contractInstance;

export const fundContract = async (amount) => {

    contractInstance = (await contractInfo()).contractInstance
    
    try {

        await contractInstance.methods
            .funding()
            .send({ value: await getWei(amount) });

        await contractBalance()
        setAlert('You fund the contract dapp with: ' + amount + ' eth','success')

    } catch (err) {
        console.log(err);
        setAlert(err.message,'warning')
    }
};

export async function contractBalance(){
    let currentUser = (await contractInfo()).account;
    let userBalance = await addressBalance(currentUser) 
    let dappBalance = await addressBalance(contractAddress) 
    
    updateBalances(dappBalance,userBalance)

    return dappBalance
}

export async function addressBalance(address) {
    let contractData = await contractInfo()  
    web3 = await contractData.webConn
    try {
        let balance = await web3.eth.getBalance(address);
        balance = await getEth(balance);
        return balance;
    } catch (err) {
        console.log(err);
        alertTrigger.update(value =>
            value = alertParser(err.message, 'warning')
        )
    }
}


export const placeBet = async (face,amount) => {
  
    try {
     
        let contractData = await contractInfo()   
        web3 = await contractData.webConn
        contractInstance = await contractData.contractInstance
        
        await contractInstance.methods.play(face).send({ value:  await getWei(amount) })
        
    } catch (err) {
        console.log(err)
        alertTrigger.update(value =>
            value = alertParser(err.message, 'warning')
        )
    }
}
