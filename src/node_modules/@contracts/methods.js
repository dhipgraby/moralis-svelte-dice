
import { getEth } from "@helpers/main";
import { alertParser } from "@helpers/messageParser";
import { alertTrigger } from "@storage/global";
import { contractInfo } from "@storage/contract";


let web3, contractInstance;

export const fundContract = async () => {

    contractInstance = (await contractInfo()).contractInstance
    
    try {
        await contractInstance.methods
            .funding()
            .send({ value: 1000000000000000000 });

    } catch (err) {
        console.log(err);
        alertTrigger.update(value =>
            value = alertParser(err.message, 'warning')
        )

    }
};

export async function addressBalance(address) {
    web3 = (await contractInfo()).webConn
    try {
        let balance = await web3.eth.getBalance(address);
        balance = await getEth(web3, balance);
        return balance;
    } catch (err) {
        console.log(err);
        alertTrigger.update(value =>
            value = alertParser(err.message, 'warning')
        )
    }
}


// async function placeBet(face,amount) {
//     web3 = await Moralis.Web3.enable();
//     let newGameId;
//     let betAmount = getWei(web3,amount)
  
//     try {
//         let event = await contractInstance.methods.play(face).send({ value: betAmount })
//         var gameId = await event.events.playGame.returnValues.id
//         alert_msg('Bet placed for game Id: ' + gameId, 'info')
//     } catch (error) {
//         if (error) {
//             console.log(error.message)
//             $('#game' + newGameId).remove()
//             alert_msg(error.message, 'danger')
//             return false;
//         }
//     }

// }