
import { setAlert } from "@storage/global";
import { contractInfo } from "@storage/contract";
import { getWei,getEth } from "@helpers/main";

export async function createDragon(dna) {
    try {
        
		let contractData = await contractInfo()
                
        await contractData.interfaces.dragon.methods.createDragonGen0(dna).send({}, function (err, txHash) {
            if (err) setAlert(err,'warning')
            else setAlert("Gen 0 created successfully. TxHash : " + txHash,'success')
        })
    } catch (error) {
        setAlert(error,'danger')
    }
}


export async function getDragon(dragonId) {

    let contractData = await contractInfo()
                
    try {
        let dragon;
        await contractData.interfaces.dragon.methods.getDragon(dragonId).call({},
         function (errMsg, dragonInfo) {
            if  (errMsg){
                console.error(errMsg)
            }     
            dragon = dragonInfo        
        })        
        return dragon

    } catch (error) {
        console.error(error)
    }
}

export async function getAllYourDragonIds() {

    let contractData = await contractInfo()
    
    try {
        let catIds = []
        await contractData.interfaces.dragon.methods.getAllYourDragonIds().call({}, function (err, idsTokens) {
            if (err) console.error("Error from getAllYourKittyIds().call(): " + err)
            catIds = idsTokens
        })
        return catIds
    }
    catch (error) {
        console.error("In getAllYourCatIds(): " + error)
    }
}

export async function getDetailsAllDragons(catIds) {
    try {
        let allCats = []
        for (let i = 0; i < catIds.length; i++) {
            const cat = await getDragon(catIds[i])
            cat.tokenId = catIds[i]
            allCats.push(cat)
            
        }
        
        return allCats
    }
    catch (error) {
        console.error("Error from getDetailsAllCats(catIds): " + error)
    }
}


async function breedCats(mumId, dadId) {

    let contractData = await contractInfo()

    try {
        await contractData.interfaces.dragon.methods.breed(mumId, dadId).send({}, function (err, txHash) {
            if (err) throw "Error returned from 'contractInfo().interfaces.dragon.methods.breed(mumId, dadId).send({}': " + err
            else {
                console.log(txHash)
                return txHash
            }
        })
    }
    catch (error) {
        console.log("In breedCats(): " + error)
    }
}

// Marketplace Contract Events

function onMarketplaceEvent(uiCallbackFunc) {
    Instance_Of_Marketplace.events.MarketTransaction().on('data', function (event) {
        uiCallbackFunc(event.returnValues)
    })
        .on('error', function (error, receipt) {
            console.log("Market Transaction Event Error")
            console.log(error)
            console.log(receipt)
        })
}

// Marketplace Contract Interface functions

export async function getDragonsForSale() {

    let contractData = await contractInfo()

    try {
        let catIdsOnSale = []
        await contractData.interfaces.marketplace.methods.getAllTokenOnSale().call({}, function (err, idsTokensOnSale) {
            if (err) setAlert(err,'warning')
            catIdsOnSale = idsTokensOnSale
        })
        return catIdsOnSale
    }
    catch (error) {
        setAlert(error,'warning')
        console.log("In getAllCatIdsOnSale(): " + error)
    }
}

async function getDetailsOfAllCatsForSale(catIds) {
    try {
        let allCatsForSale = []

        for (let i = 0; i < catIds.length; i++) {
            const cat = await getCatDetails(catIds[i])
            const forSale = await getForSaleDetails(catIds[i])
            const catForSale = { ...cat, ...forSale }
            allCatsForSale.push(catForSale)
        }
        return allCatsForSale
    }
    catch (error) {
        console.log("Error from getDetailsOfAllCatsForSale(catIds): " + error)
    }
}

export async function isTokenOnSale(dragonId) {

    let contractData = await contractInfo()

    try {
        let isOnSale
        await contractData.interfaces.marketplace.methods.isTokenOnSale(dragonId).call({}, function (errMsg, onSale) {
            if (errMsg)  setAlert(errMsg,'warning')
            isOnSale = onSale
        })
        return isOnSale
    }
    catch (error) {
        console.log("Error from isTokenOnSale(dragonId): " + error)
        return false
    }
}

export async function getForSaleDetails(dragonId) {

    let isOnSale = await isTokenOnSale(dragonId) 
    if(!isOnSale) return false;
    
    let contractData = await contractInfo()
    let forSaleDetails;
    try {    
        await contractData.interfaces.marketplace.methods.getOffer(dragonId).call({}, function (errMsg, offer) {
            if (errMsg) setAlert(errMsg,'warning')
    
            if(offer == undefined) return false;

            forSaleDetails = {
                id:  offer.tokenId,
                sellerAddress:  offer.seller,
                priceInWei: offer.price,
                active: offer.active,                
            }
        })
        return forSaleDetails
    }
    catch (error) {
        console.log("Error from getForSaleDetails(dragonId): " + error)
    }
}

export async function isApprovedForAll(){
    
    let contractData = await contractInfo();
    try {
        const isMarketplaceAnOperator = await contractData.interfaces.dragon.methods.isApprovedForAll(contractData.account, contractData.address.marketplace).call()
        return isMarketplaceAnOperator
    } catch (error) {
        console.log('error approving marketplace for all')
    }
 
}

export async function setMarketplaceApproval() {

    let contractData = await contractInfo();

    try {
        const isMarketplaceAnOperator = await contractData.interfaces.dragon.methods.isApprovedForAll(contractData.account, contractData.address.marketplace).call()

        if (isMarketplaceAnOperator == false) {
            await contractData.interfaces.dragon.methods.setApprovalForAll(contractData.address.marketplace, true).send({}, function (err, txHash) {
                if (err) setAlert(err,'warning')
                else setAlert(txHash,'success')
            })
        }
    }
    catch (err) {
        console.log("Error from setMarketplaceApproval(): " + err)
        setAlert(err,'warning')
    }
}

export async function setForSale(dragonId, salePriceInWei) {
  
    let contractData = await contractInfo()                
    salePriceInWei = await getWei(salePriceInWei)
  
    try {
        await contractData.interfaces.marketplace.methods.setOffer(salePriceInWei, dragonId).send({}, function (err, txHash) {
            if (err) {
                setAlert(err,'warning')
            }
            else {
                setAlert('Offer create successfully: '+ txHash,'success')
            }
        })
    }
    catch (err) {
        console.log(err)
        console.log("Error from setForSale(catId, salePriceInWei): " + err)
    }
}

async function withdrawFromSale(catId) {
    try {
        await Instance_Of_Marketplace.methods.removeOffer(catId).send({}, function (err, txHash) {
            if (err) {
                throw (err)
            }
            else {
                console.log(txHash)
            }
        })
    }
    catch (err) {
        console.log("Error from withdrawFromSale(catId): " + err)
    }
}

export async function buyDragon(tokenId, priceInWei) {

    let contractData = await contractInfo()           

    try {
        await contractData.interfaces.marketplace.methods.buyDragon(tokenId).send({ value: priceInWei }, function (err, txHash) {
            if (err) {
                setAlert(err,'warning')
            }
            else {
                setAlert("You just bought a new Dragon! TxHash: "+ txHash,'success')                
            }
        })
    }
    catch (err) {
        console.log("Error from buyKitty(tokenId): " + err)
    }
}