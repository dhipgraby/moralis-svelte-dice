
import { setAlert } from "@storage/global";
import { contractInfo } from "@storage/contract";

export async function createDragon(dna) {
    try {
        
		let contractData = await contractInfo()
                
        await contractData.interfaces.kittyContract.methods.createKittyGen0(dna).send({}, function (err, txHash) {
            if (err) setAlert(err,'warning')
            else setAlert("Gen 0 created successfully. TxHash : " + txHash,'success')
        })
    } catch (error) {
        setAlert(error,'danger')
    }
}


export async function getCatDetails(catId) {

    let contractData = await contractInfo()
                
    try {
        let dragon;
        await contractData.interfaces.kittyContract.methods.getKitty(catId).call({},
         function (errMsg, kitty) {
            if  (errMsg){
                console.error(errMsg)
            }     
            dragon = kitty        
        })        
        return dragon

    } catch (error) {
        console.error(error)
    }
}

export async function getAllYourCatIds() {

    let contractData = await contractInfo()
    
    try {
        let catIds = []
        await contractData.interfaces.kittyContract.methods.getAllYourKittyIds().call({}, function (err, idsTokens) {
            if (err) console.error("Error from getAllYourKittyIds().call(): " + err)
            catIds = idsTokens
        })
        return catIds
    }
    catch (error) {
        console.error("In getAllYourCatIds(): " + error)
    }
}

export async function getDetailsAllCats(catIds) {
    try {
        let allCats = []
        for (let i = 0; i < catIds.length; i++) {
            const cat = await getCatDetails(catIds[i])
            allCats.push(cat)
        }
        
        return allCats
    }
    catch (error) {
        console.error("Error from getDetailsAllCats(catIds): " + error)
    }
}


async function breedCats(mumId, dadId) {
    try {
        await contractInfo().interfaces.kittyContract.methods.breed(mumId, dadId).send({}, function (err, txHash) {
            if (err) throw "Error returned from 'contractInfo().interfaces.kittyContract.methods.breed(mumId, dadId).send({}': " + err
            else {
                console.log(txHash)
                return txHash
            }
        })
    }
    catch (error) {
        console.log("In breedCats(): " + error)
    }
}

// Marketplace Contract Events

function onMarketplaceEvent(uiCallbackFunc) {
    Instance_Of_Marketplace.events.MarketTransaction().on('data', function (event) {
        uiCallbackFunc(event.returnValues)
    })
        .on('error', function (error, receipt) {
            console.log("Market Transaction Event Error")
            console.log(error)
            console.log(receipt)
        })
}

// Marketplace Contract Interface functions

async function getAllCatIdsOnSale() {
    try {
        let catIdsOnSale = []
        await Instance_Of_Marketplace.methods.getAllTokenOnSale().call({}, function (err, idsTokensOnSale) {
            if (err) throw "Error from getAllTokenOnSale().call(): " + err
            catIdsOnSale = idsTokensOnSale
            console.log("catIdsOnSale:", catIdsOnSale)
        })
        return catIdsOnSale
    }
    catch (error) {
        console.log("In getAllCatIdsOnSale(): " + error)
    }
}

async function getDetailsOfAllCatsForSale(catIds) {
    try {
        let allCatsForSale = []

        for (let i = 0; i < catIds.length; i++) {
            const cat = await getCatDetails(catIds[i])
            const forSale = await getForSaleDetails(catIds[i])
            const catForSale = { ...cat, ...forSale }
            allCatsForSale.push(catForSale)
        }
        return allCatsForSale
    }
    catch (error) {
        console.log("Error from getDetailsOfAllCatsForSale(catIds): " + error)
    }
}

async function isCatOnSale(catId) {
    try {
        let isOnSale
        await Instance_Of_Marketplace.methods.isTokenOnSale(catId).call({}, function (errMsg, onSale) {
            if (errMsg) throw new Error(errMsg)
            isOnSale = onSale
        })
        return isOnSale
    }
    catch (error) {
        console.log("Error from isCatOnSale(catId): " + error)
        console.log("Defaulting to returning false ... continuing")
        return false
    }
}

async function getForSaleDetails(catId) {
    try {
        const forSaleDetails = {
            id: undefined,
            sellerAddress: undefined,
            priceInWei: undefined,
            active: undefined,
            price: undefined
        }

        await Instance_Of_Marketplace.methods.getOffer(catId).call({}, function (errMsg, offer) {
            if (errMsg) throw new Error(errMsg)
            if (catId != offer.tokenId) throw new Error(`Internal error - tokenId (${offer.tokenId}) returned by getOffer(catId) doesn't match catId (${catId})!?`)

            forSaleDetails.id = offer.tokenId
            forSaleDetails.sellerAddress = offer.seller
            forSaleDetails.priceInWei = offer.price
            forSaleDetails.active = offer.active

            // Convert wei price to ether
            forSaleDetails.price = web3.utils.fromWei(offer.price, 'ether')
        })
        return forSaleDetails
    }
    catch (error) {
        console.log("Error from getForSaleDetails(catId): " + error)
    }
}

async function setMarketplaceApproval() {
    try {
        const isMarketplaceAnOperator = await contractInfo().interfaces.kittyContract.methods.isApprovedForAll(User, MARKETPLACE_ADDRESS).call()

        if (isMarketplaceAnOperator == false) {
            await contractInfo().interfaces.kittyContract.methods.setApprovalForAll(MARKETPLACE_ADDRESS, true).send({}, function (err, txHash) {
                if (err) console.log(err)
                else console.log(txHash)
            })
        }
    }
    catch (err) {
        console.log("Error from setMarketplaceApproval(): " + err)
        return false
    }
}

async function setForSale(catId, salePriceInWei) {
    try {
        console.log("In setForSale")
        console.log("catId: ", catId)
        console.log("salePriceInWei: ", salePriceInWei)

        await Instance_Of_Marketplace.methods.setOffer(salePriceInWei, catId).send({}, function (err, txHash) {
            if (err) {
                throw (err)
            }
            else {
                console.log(txHash)
            }
        })
    }
    catch (err) {
        console.log("Error from setForSale(catId, salePriceInWei): " + err)
    }
}

async function withdrawFromSale(catId) {
    try {
        await Instance_Of_Marketplace.methods.removeOffer(catId).send({}, function (err, txHash) {
            if (err) {
                throw (err)
            }
            else {
                console.log(txHash)
            }
        })
    }
    catch (err) {
        console.log("Error from withdrawFromSale(catId): " + err)
    }
}

async function buyKitty(tokenId, priceInWei) {
    try {
        await Instance_Of_Marketplace.methods.buyKitty(tokenId).send({ value: priceInWei }, function (err, txHash) {
            if (err) {
                throw (err)
            }
            else {
                console.log(txHash)
            }
        })
    }
    catch (err) {
        console.log("Error from buyKitty(tokenId): " + err)
    }
}