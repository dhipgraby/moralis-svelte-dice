import { getEth, getWei } from "@helpers/main";
import { alertParser } from "@helpers/messageParser";
import { contractBalance } from "@contracts/methods";
import { alertTrigger,setAlert } from "@storage/global";
import { contractInfo, updateBalances, contractAddress } from "@storage/contract";
import { updateOracle } from "@storage/games"

async function getContractInstance() {
    let contractInst = (await contractInfo()).contractInstance
    return contractInst;
}

//GET ALL RANDOM NUMBERS FROM THE NODE
export async function getRands(){
    
    let contractInstance = await getContractInstance()
    await contractInstance.events.generatedRandomNumber( {
        fromBlock: 0,
        toBlock: 'latest'
    }, function(error, event){ console.log(event); })
}

//EVENT HANDLER
export async function initEventListener() {

    let contractInstance = await getContractInstance()
    await contractInstance.events.generatedRandomNumber()
        .once('data', (oracle) => globEvents(oracle))
        .on('error', console.error);

    await contractInstance.events.playGame()
        .once('data', (event) => globEvents(event))
        .on('error', console.error);

}

//SETTING EVENTS  

export async function globEvents(event) {
    if (event.event == "playGame") playEvent(event)
    if (event.event == "generatedRandomNumber") oracleResponse(event)
}


export async function playEvent(event) {

    try {
        let currentUser = (await contractInfo()).account
        let contractInstance = await getContractInstance()
        console.log('playGame event trigger');        
        if(event.returnValues.user.toUpperCase() != currentUser.toUpperCase()) return;
     
       //Update contract balance & emit msg
       await contractBalance()

       let amount = await getEth(event.returnValues.amount)
       let face = (parseInt(event.returnValues.coinFace) == 1) ? `Hi!`: `Low!`
       let message = `You Bet ` + face + `
       <br>For amount of  <b>` + amount + ` <i class="fab fa-ethereum"></i></b>
       <br> Game Id: <b>` + event.returnValues.id + `</b>`;

       setAlert(message,'info')
       updateOracle(true)

           await contractInstance.events.playGame()
            .once('data', (event) => globEvents(event))
            .on('error', console.error);

    } catch (err) {
        setAlert(err.message,'info')      
    }
}

export async function oracleResponse(event) {

    setTimeout(async ()=>{
        
        console.log('Oracle response event trigger');

        let contractInstance = await getContractInstance()
        var queryId = event.returnValues.queryId
        var randNumber = parseInt(event.returnValues.randomNumber)
        var userGame = await contractInstance.methods.userGame(queryId).call()
        var _coinFace = await userGame.coinFace
        var win = await gameLogic(_coinFace,randNumber)
        
        var message;
        var amount = parseFloat(userGame.amount)
        var earnings = (amount * 0.4) + amount;
            amount = (win == true) ? earnings  : amount;     
        var finalAmount = await getEth(amount)

        if(win == true){
            message = 'You earn ' + finalAmount + ' <i class="fab fa-ethereum"></i>'
        } else {
            message = 'You lose ' + -Math.abs(finalAmount) + ' <i class="fab fa-ethereum"></i>'
        }
    
        var alertType = (win == true) ? 'success' : 'dark'
        
        setAlert(message,alertType)

        await contractInstance.events.generatedRandomNumber()
            .once('data', (oracle) => globEvents(oracle))
            .on('error', console.error);
    },3000)
  
}

async function gameLogic(coinFace, randNumber) {

    //Number Higher than 51
    if (coinFace == 1) {
        if (randNumber > 51) return true
    }
    //Number Lower than 49
    if (coinFace == 2) {
        if (randNumber < 49) return true;
    }
    return false;
}



