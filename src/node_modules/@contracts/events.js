import { getEth,getWei } from "@helpers/main";
import { alertParser } from "@helpers/messageParser";
import { contractBalance } from "@contracts/methods";
import { alertTrigger } from "@storage/global";
import { contractInfo,updateBalances,contractAddress } from "@storage/contract";



async function getContractInstance(){
    let contractInst = (await contractInfo()).contractInstance
    return contractInst;
}

//EVENT HANDLER
export async function initEventListener() {

    let contractInstance = await getContractInstance()
    await contractInstance.events.generatedRandomNumber()
        .once('data', (oracle) => globEvents(oracle))
        .on('error', console.error);

    await contractInstance.events.playGame()
        .once('data', (event) => globEvents(event))
        .on('error', console.error);

}

//SETTING EVENTS  

export async function globEvents(event) {
    if (event.event == "playGame") playEvent(event)
    if (event.event == "generatedRandomNumber") oracleResponse(event)
}


export async function playEvent(event) {

    let contractInstance = await getContractInstance()
    console.log('playGame event trigger');
    //if(event.returnValues.user != getUserAddress()) return;
    const userGame = {
        'id': event.returnValues.id,
        'user': event.returnValues.user,
        'amount': event.returnValues.amount,
        'coinFace': parseInt(event.returnValues.coinFace)
    }

    console.log(userGame)
    //UPDATE BALANCES AND EMIT MSGS
    await contractBalance()
    
    await contractInstance.events.playGame()
        .once('data', (event) => globEvents(event))
        .on('error', console.error);
}




export async function oracleResponse(event) {

    console.log('Oracle response event trigger');

    let contractInstance = await getContractInstance()    
    var queryId = event.returnValues.queryId
    var randNumber = parseInt(event.returnValues.randomNumber)
    var userGame = await contractInstance.methods.userGame(queryId).call()
    var _coinFace = await userGame.coinFace

    console.log(event.returnValues)

    //Update user games table
    //Update balances
    //Emit msg
    await contractInstance.events.generatedRandomNumber()
        .once('data', (oracle) => globEvents(oracle))
        .on('error', console.error);
}

