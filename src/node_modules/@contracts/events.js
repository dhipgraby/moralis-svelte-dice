import { getEth, getWei } from "@helpers/main";
import { alertParser } from "@helpers/messageParser";
import { contractBalance } from "@contracts/methods";
import { alertTrigger,setAlert } from "@storage/global";
import { contractInfo, updateBalances, contractAddress } from "@storage/contract";
import { updateOracle } from "@storage/games"

async function getContractInstance() {
    let contractInst = (await contractInfo()).contractInstance
    return contractInst;
}


//EVENT HANDLER
export async function initEventListener() {

    let contractInstance = await getContractInstance()
    await contractInstance.events.generatedRandomNumber()
        .once('data', (oracle) => globEvents(oracle))
        .on('error', console.error);

    await contractInstance.events.playGame()
        .once('data', (event) => globEvents(event))
        .on('error', console.error);

}

//SETTING EVENTS  

export async function globEvents(event) {
    if (event.event == "playGame") playEvent(event)
    if (event.event == "generatedRandomNumber") oracleResponse(event)
}

// DragonContract Events

function onBirthEvent(uiCallbackFunc) {
    Instance_Of_DragonContract.events.Birth().on('data', function(event){
        uiCallbackFunc(event.returnValues)
    })
    .on('error', function(error, receipt) {
        console.log("Birth Event Error")
        console.log(error)
        console.log(receipt)
    })
}


// DragonContract Interface functions

async function isOwnerOfDragonContract() {
    try {
        let isOwner; 
        await Instance_Of_DragonContract.methods.owner().call({}, function(err, contractOwner){
            if (err) throw "Error from owner().call(): " + err
            isOwner = String(contractOwner).toLowerCase() === String(User).toLowerCase()
        })
        return isOwner
    }
    catch (error) {
        console.log("In isOwnerOfDragonContract(): " + error)
    }
}



// export async function playEvent(event) {

//     try {
//         let currentUser = (await contractInfo()).account
//         let contractInstance = await getContractInstance()
//         console.log('playGame event trigger');        
//         if(event.returnValues.user.toUpperCase() != currentUser.toUpperCase()) return;
     
//        //Update contract balance & emit msg
//        await contractBalance()

//        let amount = await getEth(event.returnValues.amount)
//        let face = (parseInt(event.returnValues.coinFace) == 1) ? `Hi!`: `Low!`
//        let message = `You Bet ` + face + `
//        <br>For amount of  <b>` + amount + ` <i class="fab fa-ethereum"></i></b>
//        <br> Game Id: <b>` + event.returnValues.id + `</b>`;

//        setAlert(message,'info')
//        updateOracle(true)

//            await contractInstance.events.playGame()
//             .once('data', (event) => globEvents(event))
//             .on('error', console.error);

//     } catch (err) {
//         setAlert(err.message,'info')      
//     }
// }



